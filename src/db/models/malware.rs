use attck::Node;
use mongodb::bson::oid::ObjectId;
use serde::{Deserialize, Serialize};
use stix::{ExternalReference, Object};

#[derive(Debug, Serialize, Deserialize)]
pub struct Malware {
    #[serde(rename = "_id", skip_serializing_if = "Option::is_none")]
    pub id: Option<ObjectId>,
    pub mid: String,
    pub name: String,
    #[serde(skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,

    #[serde(skip_serializing_if = "Vec::is_empty")]
    pub external_references: Vec<ExternalReference>,
}

impl<'a> From<&Node<'a, attck::Malware>> for Malware {
    fn from(node: &Node<'a, attck::Malware>) -> Self {
        Malware {
            id: Some(ObjectId::default()),
            mid: node.mitre_id().unwrap().to_string(),
            name: node.name().to_string(),
            description: node.description().map(|s| s.to_string()),
            external_references: node.external_references().to_vec(),
        }
    }
}
